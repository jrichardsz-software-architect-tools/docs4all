{
    "name": "resources",
    "data": [
        {
            "path": "/about",
            "id": 0,
            "type": "node",
            "order": 6,
            "meta": {
                "revision": 0,
                "created": 1604530807759,
                "version": 0
            },
            "$loki": 1
        },
        {
            "path": "/about/contributing.md",
            "id": 1,
            "parent": 0,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nWant to report a bug, request a feature, contribute or translate Raneto? At the moment most things can be\ncontributed via the main [Raneto GitHub repository](https://github.com/gilbitron/Raneto).\n\n* [Submit a bug report](https://github.com/gilbitron/Raneto/issues?labels=bug)\n* [Submit a feature request](https://github.com/gilbitron/Raneto/issues?labels=enhancement)\n* [Submit a pull request](https://github.com/gilbitron/Raneto/pulls)\n",
            "name": "contributing.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807759,
                "version": 0
            },
            "$loki": 2
        },
        {
            "path": "/about/related-projects.md",
            "id": 2,
            "parent": 0,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\n- [Deploy Raneto to your servers with Ansible](https://github.com/ryanlelek/raneto-devops) (@ryanlelek)\n- [Run Raneto in a Vagrant container](https://github.com/draptik/vagrant-raneto) (@draptik)\n",
            "name": "related-projects.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807759,
                "version": 0
            },
            "$loki": 3
        },
        {
            "path": "/about/showcase.md",
            "id": 3,
            "parent": 0,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nUsing Raneto in the wild? We'd love to see it.  \nAdd your site to the [Raneto Showcase](https://github.com/gilbitron/Raneto/wiki/Raneto-Showcase).\n",
            "name": "showcase.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807759,
                "version": 0
            },
            "$loki": 4
        },
        {
            "path": "/about/what-is-raneto.md",
            "id": 4,
            "parent": 0,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nRaneto is a Knowledgebase platform for [Node.js](http://nodejs.org) that uses static\n[Markdown](http://daringfireball.net/projects/markdown) files to power the knowledgebase.\n\nRaneto can be called a \"static site generator\" of sorts as it doesn't require a database. All\nof your content is stored in the `content` folder in Markdown (`.md`) files and the entire\nknowledgebase structure and content is generated by Raneto. This is good because it's:\n\n* **Simple:** You can create and manage an entire knowledge base using your favorite text editor\n* **Flat:** Raneto is a \"flat file\" CMS, meaning no database woe's, no MySQL queries, nothing\n* **Fast:** Raneto is seriously lightweight and doesn't use a database, making it super fast\n\nRaneto also features:\n\n* [Mustache](http://mustache.github.io) for easy templating\n* Responsive default template (powered by [Bootstrap](http://getbootstrap.com))\n* [Highlight.js](http://highlightjs.org) code syntax highlighting\n* Full-text search powered by [Lunr](http://lunrjs.com)\n* [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown)\n",
            "name": "what-is-raneto.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 5
        },
        {
            "path": "/install",
            "id": 5,
            "type": "node",
            "order": 5,
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 6
        },
        {
            "path": "/install/production-notes.md",
            "id": 6,
            "parent": 5,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nWhen running a live site you'll want to set the `PORT` env variable to `80` so you don't need to add `:3000` to the URL.\nThis requires root privileges and is not recommended.\n\nInstead it is preferred to use a reverse proxy for security reasons.\nHeroku and other services handle this aspect for you, but you can implement your own reverse proxy with Nginx or Apache.\n**See [Related Projects](%base_url%/related-projects) for deployment scripts to use on your own servers**\n\nYou can change the port anytime by setting the environment variable in your shell's profile, or running in-line as below:\n`$ PORT=1234 npm start`\n",
            "name": "production-notes.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 7
        },
        {
            "path": "/install/raneto",
            "id": 7,
            "parent": 5,
            "type": "node",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 8
        },
        {
            "path": "/install/raneto/installing-raneto.md",
            "id": 8,
            "parent": 7,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\n/*\nTitle: Installing Raneto\nSort: 2\n*/\n\nMake sure you have met the [minimum requirements](%base_url%/install/requirements) then install\nRaneto:\n\n**Note:** It is recommended to create a new Git repository to store your documentation files and then install Raneto as a dependency into it. See the [example directory](https://github.com/gilbitron/Raneto/tree/master/example) to see how this is done.\n\n1. Switch to your existing or new project directory.\n2. Add Raneto to your project via NPM's package.json file or downloading the latest version from the [releases page](https://github.com/gilbitron/Raneto/releases)\n3. In a terminal, run `npm install` to install the node dependencies\n4. To start Raneto, run `npm start` (or `npm run start_win` on Windows)\n5. Visit `http://localhost:3000` in your web browser\n\nYou can now start [creating pages](%base_url%/usage/creating-pages).\n\n**NOTE:** See the [Production Notes](%base_url%/install/production-notes) when installing for a live site.\n",
            "name": "installing-raneto.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 9
        },
        {
            "path": "/install/requirements.md",
            "id": 9,
            "parent": 5,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nTo run Raneto you need to have the following:\n\n* [Node.js](http://nodejs.org) **v4.0.0** (or later)\n\nHere are a [list of services](https://github.com/joyent/node/wiki/Node-Hosting) that provide Node hosting\nif you are looking to publish your knowledgebase online.\n",
            "name": "requirements.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 10
        },
        {
            "path": "/templates",
            "id": 10,
            "type": "node",
            "order": 4,
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 11
        },
        {
            "path": "/templates/customizing-the-template.md",
            "id": 11,
            "parent": 10,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nTemplating in Raneto is powered by [Mustache](http://mustache.github.io). All of the template views can\nbe found in the `themes/default/` folder. Feel free to customize the template as you wish. The template structure\nis as follows:\n\n* `layout.html`: The parent template. You'll probably want to customize this first\n* `home.html`: The homepage template. Shown if you don't have an [index.md](%base_url%/usage/custom-homepage)\n* `page.html`: The template used for single pages\n* `search.html`: The template used for search results\n* `error.html`: Shown when Raneto encounters an error or can't find a page\n\nRemember you will need to restart the app after changing the template.\n\n## Enable Features on Pages by Altering Config Settings\n\nSome features can be enabled on your pages by changing settings in the `config.default.js` file.\n\n### Enable Table of Contents\n\nIn `config.default.js` set `table_of_contents` to `true`. Raneto uses [markdown-toc](https://github.com/jonschlinkert/markdown-toc) to generate the table of contents on pages, so you can customize the apperance of the tables of contents by specifying values for parameters in the `table_of_contents_options` object in `config.default.js`.\n\n### Display Site Menu on Pages\n\nIn `config.default.js` set `menu_on_pages` to `true`. To make the menu collapsible, so that category headings can be expanded or collapsed - useful for sites with lots of pages - set `menu_on_pages_collapsible` to `true`.\n\n## Public Filesy las cuotas\n\nAll static files in Raneto (images, CSS, Javascript files etc.) are served from the `public` folder. This\nis so that no one can access any other files in the install. Only files in the `public` folder are available\nto the public.\n\nIt's worth noting that when customising Raneto you should always make your own files rather than customising\nthe existing Raneto files, so that your changes don't get lost when you\n[update Raneto](%base_url%/updates/updating-raneto).\n\n## Template Variables\n\nBelow are a list of template variables available to use in their respective templates:\n\n**home.html**\n\n* `config`: Holds an array of values from `config.js`\n* `pages`: Structured list of categories and pages (used for navigation)\n* `body_class`: Class for the `<body>` tag\n\n**page.html**\n\n* `config`: Holds an array of values from `config.js`\n* `pages`: Structured list of categories and pages (used for navigation)\n* `body_class`: Class for the `<body>` tag\n* `meta`: Holds an array of values taken from the page meta comment block (e.g. `meta.title`)\n* `content`: The HTML content of the page\n* `last_modified`: The formatted date of the time the file was last modified\n\n**search.html**\n\n* `config`: Holds an array of values from `config.js`\n* `pages`: Structured list of categories and pages (used for navigation)\n* `body_class`: Class for the `<body>` tag\n* `search`: The current search query\n* `searchResults`: An array search results\n\n## Array Structure\n\nThe `pages` array has a structure similar to the following:\n\n* `slug`: The category slug\n* `title`: The category title\n* `is_index`: True for the top level files (ie not in a category)\n* `class`: CSS class\n* `sort`: The sort index for this category\n* `files[]`: Array of pages in this category\n* `slug`: The page slug\n* `title`: The page title\n* `active`: True if the current page is \"active\"\n* `sort`: The sort index for this page\n\nThe `searchResults` array contains items which include:\n\n* `slug`: The page slug\n* `title`: The page title\n* `body`: The page content\n* `excerpt`: The page excerpt\n",
            "name": "customizing-the-template.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 12
        },
        {
            "path": "/tutorials",
            "id": 12,
            "type": "node",
            "order": 2,
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 13
        },
        {
            "path": "/tutorials/deploying-raneto-to-heroku.md",
            "id": 13,
            "parent": 12,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\n[Heroku](https://www.heroku.com) is a cloud hosting platform which allows you to host your code.\nIn this tutorial we are going to use Heroku to host our Raneto Knowledgebase on the [free 1 dyno plan](https://www.heroku.com/pricing).\n\n## Prerequisites\n\nBefore we get going there are a few things we need to make sure we have in place first:\n\n1. We are going to assume you have already [installed](%base_url%/install/installing-raneto) and set up Raneto on your local machine\n2. You are going to need a free [Heroku user account](https://signup.heroku.com/signup)\n3. You will also need to have the [Heroku Toolbelt](https://toolbelt.heroku.com) installed\n\n## Login to Heroku\n\nFirst you need to open a command shell in the root of your Raneto install. You then need to login to Heroku\nusing the `heroku login` command. You will be asked to setup some `ssh` keys if you haven't done so already.\nJust follow the instructions.\n\n    $ heroku login\n    Enter your Heroku credentials.\n    Email: zeke@example.com\n    Password:\n    Could not find an existing public key.\n    Would you like to generate one? [Yn]\n    Generating new SSH public key.\n    Uploading ssh public key /Users/adam/.ssh/id_rsa.pub\n\n## Clone Raneto and make edits\n\nHeroku works by deploying a Git repository to their servers.  \nSo we need to make your Raneto install is a Git repository.  \nThis also means you will need to commit any changes you make to Git before deploying them to Heroku.  \nThankfully this is easy to setup:  \n\n    $ git clone https://github.com/gilbitron/Raneto.git\n    $ cd Raneto/\n    [NOW EDIT FILES IN content/]\n    $ git add content/\n    $ git commit -m \"My Changes\"\n\nRemember you will need to `git commit` any future changes you make before deployment.  \n**NOTE: In the near future, we will isolate Raneto code from your documentation content (coming soon)**\n\n## Deploy Raneto to Heroku\n\nFirst we need to create the app in Heroku by running:\n\n    $ heroku create\n    Creating sharp-rain-871... done, stack is cedar-14\n    http://sharp-rain-871.herokuapp.com/ | git@heroku.com:sharp-rain-871.git\n    Git remote heroku added\n\nHeroku will assign you a random subdomain that your app will be available at.\n\nNext we need to \"push\" our Git repository to Heroku by running:\n\n    $ git push heroku master\n\nYou should see Heroku do a bunch of stuff and successfully deploy your app. Note that you will need to run the\n`git push heroku master` command after your commit changes every time you want to publish your Raneto site.\n\nFinally we just need to make sure that we have one dyno running our `web` process. This command only\nneeds to be run this one time.\n\n    $ heroku ps:scale web=1\n\nYou can now visit your live Raneto install in the browser by running the `heroku open` command.\n\n    $ heroku open\n    Opening sharp-rain-871... done\n\n## Further Reading\n\n* [Getting Started with Node.js on Heroku](https://devcenter.heroku.com/articles/getting-started-with-nodejs)\n* [Process Types and the Procfile](https://devcenter.heroku.com/articles/procfile)\n* [Dynos and the Dyno Manager](https://devcenter.heroku.com/articles/dynos)\n* [Custom Domains](https://devcenter.heroku.com/articles/custom-domains)\n",
            "name": "deploying-raneto-to-heroku.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 14
        },
        {
            "path": "/tutorials/google-oauth-setup.md",
            "id": 14,
            "parent": 12,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\n\n## TL;DR\n[Raneto](http://raneto.com/) allows only basic username/password authentication, so I added Google OAuth support. This option can be turned on by setting the `googleoauth` option in the `config.default.js` file to `true`, and by supplying the OAuth config object as outlined in the guides below. Additionally, you can allow only emails from the certain domain to use the service with one config setting.\n\nThe basic idea was taken from the [Google Cloud Platform Node.js guide](https://github.com/GoogleCloudPlatform/nodejs-getting-started/tree/master/4-auth).\n\nThis has been submitted as a [pull request]() on the official Raneto Github repository. This is my way of saying thanks to an awesome author of Raneto.\n\n## Steps on how to reproduce this on fresh copy\nBelow are the steps one needs to take to get this working on a fresh copy of Raneto. In case this won't make it to the official repo, you can clone my fork [here](https://github.com/Hitman666/Raneto). Just make sure you set your Google OAuth credentials properly (more about this in the **X** section).\n\n### Install packages via npm\n_Make sure you first [install Raneto dependencies](http://docs.raneto.com/install/installing-raneto) after you clone it._\n\nInstall the following packages:\n\n+ `npm install passport --save-dev`\n+ `npm install passport-google-oauth20 --save-dev`\n\n### Editing the `app/index.js` file\n\n+ Add passport: `var passport=require('passport');` just after raneto is required.\n+ Add oauth2 middleware: `var oauth2= require('./middleware/oauth2.js');` in the config block, just afer `error_handler.js` middleware.\n+ Change `secret` to `secret:config.secret,` in the `// HTTP Authentication` section.\n+ >>> Remove the rn-login route `app.post('/rn-login', route_login);`\n+ >>> Remove the logout route: `app.get('/logout', route_logout);`\n+ Add the following Oauth settings, just before the `app.post('/rn-login', route_login);` line:\n\n```\n// OAuth2\nif (config.googleoauth === true) {\n  app.use(passport.initialize());\n  app.use(passport.session());\n  app.use(oauth2.router(config));\n  app.use(oauth2.template);\n}\n```\n\n+ Change the `Online Editor Routes` to look like this now:\n\n```\n// Online Editor Routes\nif (config.allow_editing === true) {\n  if (config.googleoauth === true) {\n    app.post('/rn-edit',         oauth2.required, route_page_edit);\n    app.post('/rn-delete',       oauth2.required, route_page_delete);\n    app.post('/rn-add-page',     oauth2.required, route_page_create);\n    app.post('/rn-add-category', oauth2.required, route_category_create);\n  }\n  else {\n    app.post('/rn-edit',         authenticate, route_page_edit);\n    app.post('/rn-delete',       authenticate, route_page_delete);\n    app.post('/rn-add-page',     authenticate, route_page_create);\n    app.post('/rn-add-category', authenticate, route_category_create);\n  }\n}\n```\n\n+ Set the root routes to be like this:\n\n```\n// Router for / and /index with or without search parameter\nif (config.googleoauth === true) {\n  app.get('/:var(index)?', oauth2.required, route_search, route_home);\n  app.get(/^([^.]*)/, oauth2.required, route_wildcard);\n}\nelse {\n  app.get('/:var(index)?', route_search, route_home);\n  app.get(/^([^.]*)/, route_wildcard);\n}\n```\n\n### Editing the `app/middleware/authenticate.js` file\nChange the `res.redirect(403, '/login');` line to be:\n\n```\nif (config.googleoauth === true) {\n  res.redirect('/login');\n}\nelse {\n  res.redirect(403, '/login');  \n}\n```\n\n### Editing the `app/routes/login_page.route.js` file\nAdd the `googleoauth` variable to the return object like this:\n\n```\nreturn res.render('login', {\n  layout      : null,\n  lang        : config.lang,\n  rtl_layout  : config.rtl_layout,\n  googleoauth : config.googleoauth\n});\n```\n\n### Add the oauth2.js file\nCreate a new file `oauth2.js` in the `app/middleware` folder with the following content:\n\n```\n// Copyright 2015-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar express = require('express');\nvar debug = require('debug')('raneto');\n\n// [START setup]\nvar passport = require('passport');\nvar GoogleStrategy = require('passport-google-oauth20').Strategy;\n\nfunction extractProfile (profile) {\n  var imageUrl = '';\n  if (profile.photos && profile.photos.length) {\n    imageUrl = profile.photos[0].value;\n  }\n  return {\n    id: profile.id,\n    displayName: profile.displayName,\n    image: imageUrl\n  };\n}\n\n// [START middleware]\n// Middleware that requires the user to be logged in. If the user is not logged\n// in, it will redirect the user to authorize the application and then return\n// them to the original URL they requested.\nfunction authRequired (req, res, next) {\n  if (!req.user) {\n    req.session.oauth2return = req.originalUrl;\n    return res.redirect('/login');\n  }\n  next();\n}\n\n// Middleware that exposes the user's profile as well as login/logout URLs to\n// any templates. These are available as `profile`, `login`, and `logout`.\nfunction addTemplateVariables (req, res, next) {\n  res.locals.profile = req.user;\n  res.locals.login = '/auth/login?return=' +\n    encodeURIComponent(req.originalUrl);\n  res.locals.logout = '/auth/logout?return=' +\n    encodeURIComponent(req.originalUrl);\n  next();\n}\n// [END middleware]\n\nfunction router(config) {\n  // Configure the Google strategy for use by Passport.js.\n  //\n  // OAuth 2-based strategies require a `verify` function which receives the\n  // credential (`accessToken`) for accessing the Google API on the user's behalf,\n  // along with the user's profile. The function must invoke `cb` with a user\n  // object, which will be set at `req.user` in route handlers after\n  // authentication.\n  passport.use(new GoogleStrategy({\n    clientID: config.oauth2.client_id,\n    clientSecret: config.oauth2.client_secret,\n    callbackURL: config.oauth2.callback,\n    hostedDomain: config.hostedDomain || '',\n    accessType: 'offline',\n\n  }, function (accessToken, refreshToken, profile, cb) {\n    // Extract the minimal profile information we need from the profile object\n    // provided by Google\n    cb(null, extractProfile(profile));\n  }));\n\n  passport.serializeUser(function (user, cb) {\n    cb(null, user);\n  });\n  passport.deserializeUser(function (obj, cb) {\n    cb(null, obj);\n  });\n  // [END setup]\n\n  var router = express.Router();\n\n  // Begins the authorization flow. The user will be redirected to Google where\n  // they can authorize the application to have access to their basic profile\n  // information. Upon approval the user is redirected to `/auth/google/callback`.\n  // If the `return` query parameter is specified when sending a user to this URL\n  // then they will be redirected to that URL when the flow is finished.\n  // [START authorize]\n  router.get(\n    // Login url\n    '/auth/login',\n\n    // Save the url of the user's current page so the app can redirect back to\n    // it after authorization\n    function (req, res, next) {\n      if (req.query.return) {\n        req.session.oauth2return = req.query.return;\n      }\n      next();\n    },\n\n    // Start OAuth 2 flow using Passport.js\n    passport.authenticate('google', { scope: ['email', 'profile'] })\n  );\n  // [END authorize]\n\n  // [START callback]\n  router.get(\n    // OAuth 2 callback url. Use this url to configure your OAuth client in the\n    // Google Developers console\n    '/auth/google/callback',\n\n    // Finish OAuth 2 flow using Passport.js\n    passport.authenticate('google'),\n\n    // Redirect back to the original page, if any\n    function (req, res) {\n      req.session.loggedIn = true;\n      var redirect = req.session.oauth2return || '/';\n      delete req.session.oauth2return;\n      res.redirect(redirect);\n    }\n  );\n  // [END callback]\n\n  // Deletes the user's credentials and profile from the session.\n  // This does not revoke any active tokens.\n  router.get('/auth/logout', function (req, res) {\n    req.session.loggedIn = false;\n    req.logout();\n    res.redirect('/login');\n  });\n\n\n  return router;\n}\n\nmodule.exports = {\n  extractProfile: extractProfile,\n  router: router,\n  required: authRequired,\n  template: addTemplateVariables\n};\n```\n\nThis is a changed file based on the [Google Node.js official example](https://raw.githubusercontent.com/GoogleCloudPlatform/nodejs-getting-started/master/4-auth/lib/oauth2.js) file. Notable differences are in Google strategy settings which basically load settings from our settings config: \n\n```\nclientID: config.oauth2.client_id,\nclientSecret: config.oauth2.client_secret,\ncallbackURL: config.oauth2.callback,\nhostedDomain: config.hostedDomain || '',\n```\n\nWe'll define these settings the `config.default.js` file now.\n\n### Editing the `example/config.default.js` file\nChange/add the following settings:\n\n```\nallow_editing : true,\nauthentication : true,\ngoogleoauth: true,\noauth2 : {\n    client_id: 'GOOGLE_CLIENT_ID',\n    client_secret: 'GOOGLE_CLIENT_SECRET',\n    callback: 'http://localhost:3000/auth/google/callback',\n    hostedDomain: 'google.com'\n},\nsecret: 'someCoolSecretRightHere',\n```\n\n### Google OAuth2 Credentials\nOauth2 settings (`GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET `) can be found in your `Google Cloud Console->API Manager->Credentials` project settings (create a project if you don't have one yet):\n\n![](http://i.imgur.com/TdkYKul.png)\n\nThe `callback`, if testing locally, can be set as shown above (`http://localhost:3000/auth/google/callback`). The `hostedDomain` option allows certain domains - for your use case you may want to set this to your domain.\n\n#### Google+ API\nIf you get an error like:\n\n> Access Not Configured. Google+ API has not been used in project 701766813496 before, or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/plus/overview?project=701766813496 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.\n\nMake sure you enable Google+ API for your project:\n\n![](http://i.imgur.com/GcymtaZ.png)\n\n### Adding Zocial CSS\nTo add support for the nice [Zocial social buttons](http://zocial.smcllns.com/), download [this file](https://github.com/smcllns/css-social-buttons/blob/master/css/zocial.css) from their Github repo to the `themes/default/public/styles/` folder.\n\n### Editing the `themes/default/templates/layout.html` file\nReplace the login form with:\n\n```\n{{^config.googleoauth}}\n<form class=\"form-inline pull-right\">\n  {{#config.authentication}}\n    {{#loggedIn}}\n      <div class=\"dropdown\">\n        <button class=\"btn btn-info dropdown-toggle\" type=\"button\" id=\"userDropDown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n          {{username}}\n          <span class=\"caret\"></span>\n        </button>\n        <ul class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userDropDown\">\n          <li><a href=\"{{config.base_url}}/logout\" class=\"btn btn-info\">{{lang.login.logout}}</a></li>\n        </ul>\n      </div>\n    {{/loggedIn}}\n    {{^loggedIn}}\n    &nbsp;<a href=\"{{config.base_url}}/login\" class=\"btn btn-info\">{{lang.login.login}}</a>\n    {{/loggedIn}}\n  {{/config.authentication}}\n</form>\n{{/config.googleoauth}}\n\n{{#config.googleoauth}}\n<form class=\"form-inline pull-right\">\n  {{#config.authentication}} {{#loggedIn}} &nbsp;\n  <span>{{profile.displayName}}</span> &nbsp;\n  <a href=\"{{config.base_url}}/auth/logout\" class=\"btn btn-info\">{{lang.login.logout}}</a> {{/loggedIn}} {{^loggedIn}} &nbsp;\n  <a href=\"{{config.base_url}}/auth/login\" class=\"btn btn-info\">{{lang.login.login}}</a> {{/loggedIn}} {{/config.authentication}}\n</form>\n{{/config.googleoauth}}\n```\n\nWe added two scenarios for when we have Google OAuth enabled (`config.googleoauth`) and when we don't (defaulting to the current Raneto behavior).\n\n### Editing the `themes/default/templates/login.html` file\nAdd zocial reference:\n\n`<link rel=\"stylesheet\" href=\"{{config.base_url}}/styles/zocial.css\">`\n\nReplace the whole `form-bottom` classed div with the following code:\n\n```\n<div class=\"form-bottom\">\n    {{#config.googleoauth}}\n      <a href=\"/auth/login\" class=\"zocial google\">Sign in with Google</a>\n    {{/config.googleoauth}}\n\n    {{^config.googleoauth}}\n    <form role=\"form\" action=\"\" method=\"post\" class=\"login-form\">\n      <div class=\"form-group\">\n        <label class=\"sr-only\" for=\"form-username\">{{lang.login.username}}</label>\n          <input tabindex=\"1\" type=\"text\" name=\"username\" placeholder=\"{{lang.login.username}}\" class=\"form-username form-control\" id=\"form-username\">\n        </div>\n        <div class=\"form-group\">\n          <label class=\"sr-only\" for=\"form-password\">{{lang.login.password}}</label>\n          <input tabindex=\"2\" type=\"password\" name=\"password\" placeholder=\"{{lang.login.password}}\" class=\"form-password form-control\" id=\"form-password\">\n        </div>\n        <button type=\"submit\" class=\"btn\">{{lang.login.login}}</button>\n    </form>\n    {{/config.googleoauth}}\n</div>\n```\n\nSame thing here as well. If we have Google OAuth enabled (`config.googleoauth`) then we show the new Google login button and hide the rest. Otherwise, we default it to the current Raneto behavior.\n\n## Testing\nCongratulations, you're done! Now, to test this locally just run the `npm start` from the root of your project and go to `http://localhost:3000` and you should see this:\n\n![](http://i.imgur.com/qTTwY4z.png)\n\nAfter logging in, you should see something like this:\n\n![](http://i.imgur.com/1YcdTou.png)\n\nHope this helps someone!\n",
            "name": "google-oauth-setup.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 15
        },
        {
            "path": "/tutorials/running-as-a-service.md",
            "id": 15,
            "parent": 12,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nYou can run Raneto easily in the background on your local or production machines with PM2.\n\n1. Install Raneto globally with `npm install -g raneto`\n2. Edit the configuration file in your global NPM `node_modules/` directory (locate with `which raneto` on *NIX)\n3. Run Raneto with `raneto start` and access logs with `raneto logs`\n4. When finished, run `raneto stop`\n",
            "name": "running-as-a-service.md",
            "order": 1,
            "targetAudience": "user",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 16
        },
        {
            "path": "/updates",
            "id": 16,
            "type": "node",
            "order": 3,
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 17
        },
        {
            "path": "/updates/updating-raneto.md",
            "id": 17,
            "parent": 16,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Updating Raneto\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nThe update process for Raneto is as follows:\n\n1. Make a backup of your `content` folder and your `config.js` outside of your project.\n\n1. (Optional) If you have edited the template, backup the following paths:\n   - the `themes/default/` folder\n   - any edited files in the `public` folder\n\n1. Download the latest version of Raneto from the [releases page](https://github.com/gilbitron/Raneto/releases).\n\n1. Extract the Raneto archive to your project folder, replacing all existing files in your existing Raneto install.\n\n1. Copy your `content` folder and `config.js` file from your backup location back into the install location.\n\n1. (Optional) If you have edited the template, copy your backed up `themes/default/` and `public` folders to the install location.\n\n1. From the root of your project, run:\n\n   ```bash\n   npm update\n   ```\n\n1. To build the docs, run:\n\n   ```bash\n   npm start\n   ```\n\nYou are running the lastest version of Raneto.\n",
            "name": "updating-raneto.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Updating Raneto",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 18
        },
        {
            "path": "/usage",
            "id": 18,
            "type": "node",
            "order": 1,
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 19
        },
        {
            "path": "/usage/authentication.md",
            "id": 19,
            "parent": 18,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Authentication\",\n  \"version\":\"1.0.0\"\n}\n-->\n\n## Authentication\n\nTo enable basic Authentication in Raneto is very simple.\n\nIn `config.js`\n\nChange `authentication` to `true`.\n\nChange `credentials` to your desired username and password.\n\nRestart the server, if running, and you're ready to roll, privately.\n",
            "name": "authentication.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Authentication",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 20
        },
        {
            "path": "/usage/category-meta.md",
            "id": 20,
            "parent": 18,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Category Meta\",\n  \"version\":\"1.0.0\"\n}\n-->\n\n You can add a file called meta (with no extension) in the category foler. This file must be specified in [YAML](http://www.yaml.org/spec/1.2/spec.html) and contains meta data about the category. The following meta items affect how Raneto works:\n\n * Title - This variable will override the title based on the folder name.\n * Sort - This variable will affect the sorting of the categories.\n * ShowOnHome - Optional. If false, categoru won't show on the home page. Default behavior can be changed through `config.show_on_home_default`.\n * Description - Optional. This variable will provide a variable to be used in the templates, for example in the hompage, to enhance and clarify the content of the category.\n\n Note that `config.show_on_home_default` sets the default behavior for pages too.\n",
            "name": "category-meta.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Category Meta",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 21
        },
        {
            "path": "/usage/configuration.md",
            "id": 21,
            "parent": 18,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Configuration\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nTo edit the configuration of Raneto you need to edit `config.js` in the root directory.\nIt should contain config variables like:\n\n```\n// Your site title (format: page_title - site_title)\nsite_title: 'Example Site',\n// The base URL of your site (can use %base_url% in Markdown files)\nbase_url: '',\n// Used for the \"Get in touch\" page footer link\nsupport_email: 'support@example.com',\n// Footer copyright content\ncopyright: 'Copyright &copy; Example Site',\n// Excerpt length (used in search)\nexcerpt_length: 400\n// ...\n```\n\nFeel free to edit these variables as you wish. Each variable comes with an explanation as to what it does.\nRemember you will need to restart the app after changing config variables.\n\nIf you are editing the template you can add custom variables here and they will become availble in the\ntemplate via the `config` variable (e.g. `{{config.myvar}}`)\n",
            "name": "configuration.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Configuration",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 22
        },
        {
            "path": "/usage/creating-pages.md",
            "id": 22,
            "parent": 18,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Creating pages\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nCreating pages in Raneto is as simple as creating a Markdown file (`.md`) with you favourite text editor.\nThere are several important aspects to your files that you need to pay attention to when you create pages.\n\n## File Location\n\nAll of your Markdown files must go in the `content` folder in the root of the application (this can be\nconfigured in `config.js`). You can add as many sub-folders as you like in the content folder, but only\n`.md` files within the `content` folder (or sub-folders) will be recognised.\n\nYou can use sub-folders as a way of creating \"categories\" of pages. For example if you create a sub-folder\ncalled `using-my-product` all of the pages inside that folder will appear under the **Using My Product**\ncategory in Raneto. You can create as many levels of sub-folder as you like but they will always appear\nas a top level category.\n\nSub-folders will also be added to the page URL or \"slug\". See file naming below for more information.\n\n## File Name\n\nThe name of the file defines what URL or \"slug\" is used to navigate to that page. For example if you create\na file called `my-example-page.md` you would visit that page be navigation to `example.com/my-example-page`.\nBelow is a table of example folder and file names and the URL's they would have in Raneto.\n\nFile Location | URL\n------------- | -------------\n`content/hello.md` | `/hello`\n`content/my-example-page.md` | `/my-example-page`\n`content/hello/my-example-page.md` | `/hello/my-example-page`\n`content/some/sub/folder/page.md` | `/some/sub/folder/page`\n\nIf a file cannot be found the `error.html` template will be shown.\n\n## File Markup\n\nPages are created using Markdown. If you are new to Markdown please refer to the\n[syntax guide](http://daringfireball.net/projects/markdown/syntax) for more information. Pages can also\ncontain regular HTML.\n\nAt the top of a page you can place a block comment to specify certain attributes of the page. For example\nyou can specify the page title or a description to be used by search engines. Specifying page meta is\noptional.\n\n    /*\n    Title: My Page Title\n    Description: Optional description for search engines\n    */\n\nNote that if no meta title is specified the filename will be used to generate a page title.\n\nYou can also use certain variables in your Markdown pages which will be replaced with the values\nyou set in [your config](%base_url%/usage/configuration).\n\n* *&#37;base_url&#37;*: The base URL of your site\n* *&#37;image_url&#37;*: The base URL of your images folder (`public/images`)\n",
            "name": "creating-pages.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Creating pages",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807760,
                "version": 0
            },
            "$loki": 23
        },
        {
            "path": "/usage/custom-homepage.md",
            "id": 23,
            "parent": 18,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Custom Homepage\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nBe default Raneto shows a Knowledgebase homepage which lists your articles (and categories) and has\na regular Knowledgebase design.\n\nHowever if you want to override this page and have a custom homepage you can create an `index.md` file\nin the `content` folder which will be treated like a regular page.\n",
            "name": "custom-homepage.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Custom Homepage",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807761,
                "version": 0
            },
            "$loki": 24
        },
        {
            "path": "/usage/deleting-pages.md",
            "id": 24,
            "parent": 18,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Deleting pages\",\n  \"version\":\"1.0.0\"\n}\n-->\n\n\nDeleting pages in Raneto is as simple as deleting the Markdown file (`.md`) from the content folder.\n",
            "name": "deleting-pages.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Deleting pages",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807761,
                "version": 0
            },
            "$loki": 25
        },
        {
            "path": "/usage/page-meta.md",
            "id": 25,
            "parent": 18,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Page Meta\",\n  \"version\":\"1.0.0\"\n}\n-->\n\n\nEach page can contain optional meta data about the page. This is useful when you need the page to have a different\nTitle than the file name. The meta data will also let you override the last modified date of the page. The meta data\nshould be written in [YAML](http://www.yaml.org/spec/1.2/spec.html).\n\n * Title - This variable will override the title based on the file name.\n * Description - This variable will give lunr a description to search on.\n * Sort - This variable will affect the sorting of the pages inside the category.\n * ShowOnHome - Optional. If false, page won't be listed on the home page. Default behavior can be changed through `config.show_on_home_default`.\n * Modified - This variable will override the modified date based on the file name.\n   * This should be in full ISO 8601 format including Time and Timezone offset.\n\nBefore version 0.11.0 these meta blocks could only be HTML comments (/\\* \\*/). Starting with version 0.11.0, the meta\nblocks should be YAML blocks.\n",
            "name": "page-meta.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Page Meta",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807761,
                "version": 0
            },
            "$loki": 26
        },
        {
            "path": "/usage/sorting.md",
            "id": 26,
            "parent": 18,
            "type": "child",
            "content": "<!-- \n{\n  \"order\":1,\n  \"targetAudience\":\"user\",\n  \"title\": \"Sorting\",\n  \"version\":\"1.0.0\"\n}\n-->\n\nBy default pages and categories are sorted alphabetically. To manually sort pages and categories please\nfollow the instructions below.\n\n## Sorting Pages\n\nTo manually sort pages you have to add a `Sort` item to the page meta. For example:\n\n    /*\n    Title: Sorting\n    Sort: 4\n    */\n\nThe value of `Sort` should be an index integer. This page will now appear after any other pages with\na sort index of `3` or less, and before any pages with a sort index on `5` or more. If a page doesn't\nhave a sort index set, it will default to `0`.\n\nYou can change the meta value used for sorting by changing the `page_sort_meta` option in `config.js`.\n\n## Sorting Categories\n\nTo manually sort categories you can add a file called `sort` (with no extension) in the category\nfolder. The content of the file should simply be an index integer. Sorting will occur the same way as\nit does for pages. If no `sort` file exists the category will have a sort index of `0`.\n\nAlternatively, you can add a file called `meta` (with no extension) in the category foler. This file\ncan be specified in YAML format and can also override the category title. For example:\n\n```\nTitle: Sorting\nSort: 4\n```\n\nNote that top level files (i.e. files without a category) will be in an \"index\" category with a sort\nvalue of `0`, so it makes sense to order your category indexes starting at `1`.\n\nYou can disable manual category sorting by setting the `category_sort` option in `config.js` to `false`.\nThis effectively forces the default alphabetical sorting.\n",
            "name": "sorting.md",
            "order": 1,
            "targetAudience": "user",
            "title": "Sorting",
            "version": "1.0.0",
            "meta": {
                "revision": 0,
                "created": 1604530807761,
                "version": 0
            },
            "$loki": 27
        }
    ],
    "idIndex": null,
    "binaryIndices": {},
    "constraints": {
        "unique": {},
        "exact": {}
    },
    "uniqueNames": [],
    "transforms": {},
    "objType": "resources",
    "dirty": true,
    "cachedIndex": null,
    "cachedBinaryIndex": null,
    "cachedData": null,
    "adaptiveBinaryIndices": true,
    "transactional": false,
    "cloneObjects": false,
    "cloneMethod": "parse-stringify",
    "asyncListeners": false,
    "disableMeta": false,
    "disableChangesApi": true,
    "disableDeltaChangesApi": true,
    "autoupdate": false,
    "serializableIndices": true,
    "disableFreeze": true,
    "ttl": {
        "age": null,
        "ttlInterval": null,
        "daemon": null
    },
    "maxId": 27,
    "DynamicViews": [],
    "events": {
        "insert": [],
        "update": [],
        "pre-insert": [],
        "pre-update": [],
        "close": [],
        "flushbuffer": [],
        "error": [],
        "delete": [
            null
        ],
        "warning": [
            null
        ]
    },
    "changes": [],
    "dirtyIds": []
}
